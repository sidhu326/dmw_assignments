# -*- coding: utf-8 -*-
"""q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UT6JZHKN51GMiecVdQm02-6t3L8xy7mz
"""

import pandas as pd
import numpy as np
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn import metrics
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import scale


print("Markov Sampling for SVMC")
def readfile():
  ltrs = pd.read_csv(r"/content/letter-recognition.csv")
  return ltrs
def predictlinear(X_train, y_train,X_test):
  model_linear = SVC(kernel='linear')
  model_linear.fit(X_train, y_train)
  y_pred = model_linear.predict(X_test)
  print()
  print("%accuracy of linear kernel:", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), "\n")

def rbf(X_train, y_train,X_test):
  non_linear_model = SVC(kernel='rbf')
  non_linear_model.fit(X_train, y_train)
  y_pred = non_linear_model.predict(X_test)
  print("%accuracy with RBF kernel:", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), "\n")
  return

def poly(X_train, y_train,X_test):
  non_linear_model1 = SVC(kernel='poly', degree = 2)
  non_linear_model1.fit(X_train, y_train)
  y_pred = non_linear_model1.predict(X_test)
  print("%accuracy of Polynomial kernel (x^2):", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), "\n")

ltrs=readfile()
ltrs.columns = ['lettr', 'x-box', 'y-box', 'width', 'high', 'onpix', 'x-bar',
       'y-bar', 'x2bar', 'y2bar', 'xybar', 'x2ybar', 'xy2bar', 'x-ege',
       'xegvy', 'y-ege', 'yegvx']
order = list(np.sort(ltrs['lettr'].unique()))
plt.figure(figsize=(16, 8))
sns.barplot(x='lettr', y='x-box', 
            data=ltrs, 
            order=order)
ltr_means = ltr.groupby('lettr').mean()
ltr_means.head()
plt.figure(figsize=(18, 10))
sns.heatmap(ltr_means)
round(ltrs.drop('lettr', axis=1).mean(), 2)
X = ltrs.drop("lettr", axis = 1)
y = ltrs['lettr']
X_scaled = scale(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.3, random_state = 101)
predictlinear(X_train, y_train,X_test)

rbf(X_train, y_train,X_test)
poly(X_train, y_train,X_test)